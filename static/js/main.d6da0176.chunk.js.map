{"version":3,"sources":["actions/index.js","services/swAPI.js","components/TableHeader.js","components/Table.js","components/ActiveFilters.js","components/NameFilterInput.js","components/ColumnFilterSelect.js","components/ComparisonFilterSelect.js","components/ValueFilterInput.js","components/Filters.js","App.js","serviceWorker.js","reducers/Planets.js","reducers/Filters.js","reducers/Sort.js","reducers/index.js","store/index.js","index.js"],"names":["fetchPlanets","dispatch","type","fetch","then","response","json","ok","Promise","resolve","reject","data","results","error","receivePlanetsFailure","message","connect","orderColumn","value","sortColumn","map","title","key","onClick","e","event","target","innerHTML","changeOrder","Table","props","filterPlanetsName","bind","filterNumericNumber","changeColumnOrder","sortAscending","sortDescending","planet","name","population","orbital_period","diameter","climate","gravity","terrain","rotation_period","surface_water","films","film","created","edited","url","filters","reduce","previousList","filter","index","planetList","bigger","Number","column","less","equal","comparison","getPlanets","this","planetsData","isNumeric","sort","a","b","order","includes","numeric_values","length","comparisonCase","toUpperCase","isFetching","filteredPlanets","sortedPlanets","className","createRows","Component","defaultProps","planets","ActiveFilters","showActiveFilters","createFilter","filterObj","removePlanetFilters","numericValues","removeFilters","filterName","planetFilterName","placeholder","onChange","verifySelect","find","ColumnFilterSelect","handleChange","ComparisonFilterSelect","defaultValue","disabled","ValueFilterInput","Filters","state","filterColumn","filterComparison","filterValue","sendValues","setState","addPlanetFilters","addFilters","App","Boolean","window","location","hostname","match","INITIAL_PLANET_STATE","action","INITIAL_FILTER_STATE","columnOrder","rootReducer","combineReducers","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6da0176.chunk.js","sourcesContent":["import { getPlanets } from '../services/swAPI';\n\nexport const RECEIVE_PLANETS_SUCCESS = 'RECEIVE_PLANETS_SUCCESS';\nexport const RECEIVE_PLANETS_FAILURE = 'RECEIVE_PLANETS_FAILURE';\nexport const REQUEST_PLANETS = 'REQUEST_PLANETS';\nexport const FILTER_PLANET_NAME = 'FILTER_PLANET_NAME';\nexport const ADD_FILTERS = 'ADD_FILTERS';\nexport const REMOVE_FILTERS = 'REMOVE_FILTERS';\nexport const SORT_COLUMN = 'SORT_COLUMN';\n\nexport const sortColumn = (value) => ({\n  type: SORT_COLUMN,\n  value,\n});\n\nexport const removeFilters = (value) => ({\n  type: REMOVE_FILTERS,\n  value,\n});\n\nexport const addFilters = (value) => ({\n  type: ADD_FILTERS,\n  value,\n});\n\nexport const planetFilterName = (value) => ({\n  type: FILTER_PLANET_NAME,\n  value,\n});\n\nconst requestPlanets = () => ({\n  type: REQUEST_PLANETS,\n});\n\nconst receivePlanetsSuccess = ({ results }) => ({\n  type: RECEIVE_PLANETS_SUCCESS,\n  data: results,\n});\n\nconst receivePlanetsFailure = (error) => ({\n  type: RECEIVE_PLANETS_FAILURE,\n  error,\n});\n\nexport function fetchPlanets() {\n  return (dispatch) => {\n    dispatch(requestPlanets());\n    return getPlanets()\n      .then(\n        (data) => dispatch(receivePlanetsSuccess(data)),\n        (error) => dispatch(receivePlanetsFailure(error.message)),\n      );\n  };\n}\n","export const SW_BASE_API = 'https://swapi.co/api/planets/';\n\nexport const getPlanets = () => (\n  fetch(SW_BASE_API)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sortColumn } from '../actions';\n\nfunction changeOrder(event, orderColumn) {\n  const title = event.target.innerHTML;\n  orderColumn(title);\n}\n\nfunction TableHeader({ orderColumn }) {\n  const titles = [\n    'name',\n    'population',\n    'orbital_period',\n    'diameter',\n    'climate',\n    'gravity',\n    'terrain',\n    'rotation_period',\n    'surface_water',\n    'films',\n    'created',\n    'edited',\n    'url',\n  ];\n\n  return (\n    <tr>\n      {titles.map((title) => (\n        <th key={title}>\n          <button type=\"button\" onClick={(e) => changeOrder(e, orderColumn)}>{title}</button>\n        </th>\n      ))}\n    </tr>\n  );\n}\n\nTableHeader.propTypes = {\n  orderColumn: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  orderColumn: (value) => dispatch(sortColumn(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(TableHeader);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlanets } from '../actions';\nimport TableHeader from './TableHeader';\n\nclass Table extends Component {\n  static createRows(planet) {\n    return (\n      <tr key={planet.name}>\n        <td>{planet.name}</td>\n        <td>{planet.population}</td>\n        <td>{planet.orbital_period}</td>\n        <td>{planet.diameter}</td>\n        <td>{planet.climate}</td>\n        <td>{planet.gravity}</td>\n        <td>{planet.terrain}</td>\n        <td>{planet.rotation_period}</td>\n        <td>{planet.surface_water}</td>\n        <td>{planet.films.map((film) => <div key={film}>{film}</div>)}</td>\n        <td>{planet.created}</td>\n        <td>{planet.edited}</td>\n        <td>{planet.url}</td>\n      </tr>\n    );\n  }\n\n  static comparisonCase(filters, data) {\n    return filters.reduce((previousList, filter, index) => {\n      const planetList = (index === 0) ? data : previousList;\n      const obj = {\n        bigger: planetList.filter((planet) => Number(planet[filter.column]) > filter.value),\n        less: planetList.filter((planet) => Number(planet[filter.column]) < filter.value),\n        equal: planetList.filter((planet) => planet[filter.column] === filter.value),\n      };\n      return obj[filter.comparison];\n    }, []);\n  }\n\n  constructor(props) {\n    super(props);\n    this.filterPlanetsName = this.filterPlanetsName.bind(this);\n    this.filterNumericNumber = this.filterNumericNumber.bind(this);\n    this.changeColumnOrder = this.changeColumnOrder.bind(this);\n    this.sortAscending = this.sortAscending.bind(this);\n    this.sortDescending = this.sortDescending.bind(this);\n  }\n\n  componentDidMount() {\n    const { getPlanets } = this.props;\n    getPlanets();\n  }\n\n  sortAscending(planetsData, isNumeric) {\n    const { sortColumn: { column } } = this.props;\n    if (!isNumeric) {\n      return planetsData.sort((a, b) => {\n        if (a[column] > b[column]) return 1;\n        if (b[column] > a[column]) return -1;\n        return 0;\n      });\n    }\n    return planetsData.sort((a, b) => {\n      if (a[column] === 'unknown') return 1;\n      if (b[column] === 'unknown') return -1;\n      return Number(a[column]) - Number(b[column]);\n    });\n  }\n\n  sortDescending(planetsData, isNumeric) {\n    const { sortColumn: { column } } = this.props;\n    if (!isNumeric) {\n      return planetsData.sort((a, b) => {\n        if (a[column] > b[column]) return -1;\n        if (b[column] > a[column]) return 1;\n        return 0;\n      });\n    }\n    return planetsData.sort((a, b) => {\n      if (a[column] === 'unknown') return -1;\n      if (b[column] === 'unknown') return 1;\n      return Number(b[column]) - Number(a[column]);\n    });\n  }\n\n  changeColumnOrder(planetsData) {\n    const { sortColumn: { column, order } } = this.props;\n    const numericColumns = [\n      'population',\n      'orbital_period',\n      'diameter',\n      'rotation_period',\n      'surface_water',\n    ];\n    const isNumeric = numericColumns.includes(column);\n\n    if (!column) return planetsData;\n\n    if (order === 'ASC') return this.sortAscending(planetsData, isNumeric);\n    return this.sortDescending(planetsData, isNumeric);\n  }\n\n  filterNumericNumber(planetsData) {\n    const { numeric_values } = this.props;\n    if (numeric_values.length !== 0) {\n      return Table.comparisonCase(numeric_values, planetsData);\n    }\n    return planetsData;\n  }\n\n  filterPlanetsName() {\n    const { data, name } = this.props;\n    if (name) {\n      return data.filter((planet) => planet.name.toUpperCase().includes(name.toUpperCase()));\n    }\n    return data;\n  }\n\n  render() {\n    const { isFetching, data } = this.props;\n    const filteredPlanets = (data) ? this.filterNumericNumber(this.filterPlanetsName()) : false;\n    const sortedPlanets = this.changeColumnOrder(filteredPlanets);\n    return (\n      <div className=\"table\">\n        {isFetching && 'Loading...'}\n        <p>Para ordenar basta clicar em cima do titulo da coluna desejada.</p>\n        <table>\n          <tbody>\n            <TableHeader />\n            {sortedPlanets && sortedPlanets.map((planet) => Table.createRows(planet))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  getPlanets: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n  })),\n  name: PropTypes.string,\n  numeric_values: PropTypes.arrayOf(PropTypes.shape({})),\n  sortColumn: PropTypes.shape({\n    column: PropTypes.string.isRequired,\n    order: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nTable.defaultProps = {\n  data: [],\n  name: '',\n  numeric_values: [],\n};\n\nconst mapStateToProps = ({\n  planets: { isFetching, data },\n  filters: { name, numeric_values },\n  sort: { sortColumn },\n}) => ({\n  isFetching,\n  data,\n  name,\n  numeric_values,\n  sortColumn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getPlanets: () => dispatch(fetchPlanets()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeFilters } from '../actions';\n\nclass ActiveFilters extends Component {\n  constructor(props) {\n    super(props);\n    this.showActiveFilters = this.showActiveFilters.bind(this);\n    this.createFilter = this.createFilter.bind(this);\n  }\n\n  createFilter(filterObj) {\n    const { removePlanetFilters } = this.props;\n    return (\n      <p key={filterObj.column} className=\"active-filters\">\n        {`${filterObj.column} | ${filterObj.comparison} | ${filterObj.value}  `}\n        <button type=\"button\" onClick={() => removePlanetFilters(filterObj)}>X</button>\n      </p>\n    );\n  }\n\n  showActiveFilters(filters) {\n    return filters.map((filter) => this.createFilter(filter));\n  }\n\n  render() {\n    const { numeric_values: numericValues } = this.props;\n    return (\n      <div className=\"active-filters\">\n        <h3>Filtros Ativos</h3>\n        {numericValues && this.showActiveFilters(numericValues)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ filters: { numeric_values } }) => ({ numeric_values });\n\nconst mapDispatchToProps = (dispatch) => ({\n  removePlanetFilters: (value) => dispatch(removeFilters(value)),\n});\n\nActiveFilters.propTypes = {\n  numeric_values: PropTypes.arrayOf(PropTypes.shape({})),\n  removePlanetFilters: PropTypes.func.isRequired,\n};\n\nActiveFilters.defaultProps = {\n  numeric_values: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveFilters);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { planetFilterName } from '../actions';\n\nfunction NameFilterInput({ filterName }) {\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Filtrar pelo Nome\"\n      onChange={(e) => filterName(e.target.value)}\n    />\n  );\n}\n\nNameFilterInput.propTypes = {\n  filterName: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  filterName: (value) => dispatch(planetFilterName(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(NameFilterInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nfunction verifySelect(filters, value) {\n  const exists = filters.find((filterObj) => filterObj.column === value);\n  if (exists) return false;\n  return true;\n}\n\nfunction ColumnFilterSelect({ numeric_values, handleChange }) {\n  return (\n    <select name=\"column\" onChange={(e) => handleChange(e.target.value)}>\n      <option value=\"\">Selecionar Opção</option>\n      {verifySelect(numeric_values, 'population') && <option value=\"population\">População</option>}\n      {verifySelect(numeric_values, 'orbital_period') && <option value=\"orbital_period\">Duração Orbital</option>}\n      {verifySelect(numeric_values, 'diameter') && <option value=\"diameter\">Diâmetro</option>}\n      {verifySelect(numeric_values, 'rotation_period') && <option value=\"rotation_period\">Duração da Rotação</option>}\n      {verifySelect(numeric_values, 'surface_water') && <option value=\"surface_water\">Superfície da Água</option>}\n    </select>\n  );\n}\n\nColumnFilterSelect.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  numeric_values: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nColumnFilterSelect.defaultProps = {\n  numeric_values: [],\n};\n\nconst mapStateToProps = ({ filters: { numeric_values } }) => ({ numeric_values });\n\nexport default connect(mapStateToProps)(ColumnFilterSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ComparisonFilterSelect({ handleChange }) {\n  return (\n    <select name=\"type\" defaultValue=\"\" onChange={(e) => handleChange(e.target.value)}>\n      <option value=\"\" disabled>Selecionar Opção</option>\n      <option value=\"bigger\">Maior que</option>\n      <option value=\"less\">Menor que</option>\n      <option value=\"equal\">Igual a</option>\n    </select>\n  );\n}\n\nComparisonFilterSelect.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default ComparisonFilterSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ValueFilterInput({ handleChange }) {\n  return (\n    <input\n      type=\"number\"\n      placeholder=\"Filtrar por Valor\"\n      onChange={(e) => handleChange(e.target.value)}\n    />\n  );\n}\n\nValueFilterInput.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default ValueFilterInput;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addFilters } from '../actions';\nimport ActiveFilters from './ActiveFilters';\nimport NameFilterInput from './NameFilterInput';\nimport ColumnFilterSelect from './ColumnFilterSelect';\nimport ComparisonFilterSelect from './ComparisonFilterSelect';\nimport ValueFilterInput from './ValueFilterInput';\n\nclass Filters extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      column: '',\n      comparison: '',\n      value: '',\n    };\n    this.filterColumn = this.filterColumn.bind(this);\n    this.filterComparison = this.filterComparison.bind(this);\n    this.filterValue = this.filterValue.bind(this);\n    this.sendValues = this.sendValues.bind(this);\n  }\n\n  filterColumn(value) {\n    this.setState({\n      column: value,\n    });\n  }\n\n  filterComparison(value) {\n    this.setState({\n      comparison: value,\n    });\n  }\n\n  filterValue(value) {\n    this.setState({\n      value,\n    });\n  }\n\n  sendValues() {\n    const { column, comparison, value } = this.state;\n    const { addPlanetFilters } = this.props;\n    addPlanetFilters({ column, comparison, value });\n    this.setState({\n      column: '',\n    });\n  }\n\n  render() {\n    const { column, comparison, value } = this.state;\n    return (\n      <div>\n        <ActiveFilters />\n        <div className=\"filters\">\n          <NameFilterInput />\n          Filtrar por Valores Numéricos\n          <div className=\"filter-planets\">\n            <ColumnFilterSelect handleChange={this.filterColumn} />\n            <ComparisonFilterSelect handleChange={this.filterComparison} />\n            <ValueFilterInput handleChange={this.filterValue} />\n            {column && comparison && value\n            && <button type=\"button\" onClick={() => this.sendValues()}>Adicionar Filtro</button>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFilters.propTypes = {\n  addPlanetFilters: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPlanetFilters: (value) => dispatch(addFilters(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(Filters);\n","import React from 'react';\nimport './App.css';\n\nimport Table from './components/Table';\nimport Filters from './components/Filters';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Filters />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REQUEST_PLANETS, RECEIVE_PLANETS_SUCCESS, RECEIVE_PLANETS_FAILURE } from '../actions';\n\nconst INITIAL_PLANET_STATE = {\n  isFetching: false,\n};\n\nconst planets = (state = INITIAL_PLANET_STATE, action) => {\n  switch (action.type) {\n    case REQUEST_PLANETS:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_PLANETS_SUCCESS:\n      return {\n        ...state,\n        data: action.data,\n        isFetching: false,\n      };\n    case RECEIVE_PLANETS_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        isFetching: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default planets;\n","import {\n  FILTER_PLANET_NAME,\n  ADD_FILTERS,\n  REMOVE_FILTERS,\n} from '../actions';\n\nconst INITIAL_FILTER_STATE = {\n  name: '',\n  numeric_values: [],\n};\n\nconst filters = (state = INITIAL_FILTER_STATE, action) => {\n  switch (action.type) {\n    case FILTER_PLANET_NAME:\n      return {\n        ...state,\n        name: action.value,\n      };\n    case ADD_FILTERS:\n      return {\n        ...state,\n        numeric_values: [...state.numeric_values, action.value],\n      };\n    case REMOVE_FILTERS:\n      return {\n        ...state,\n        numeric_values: [...state.numeric_values.filter((filter) => filter !== action.value)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filters;\n","import {\n  SORT_COLUMN,\n} from '../actions';\n\nconst INITIAL_FILTER_STATE = {\n  sortColumn: {\n    column: 'name',\n    order: 'ASC',\n  },\n};\n\nconst sort = (state = INITIAL_FILTER_STATE, action) => {\n  let columnOrder = 'ASC';\n  if (action.value === state.sortColumn.column) {\n    columnOrder = (state.sortColumn.order === 'ASC') ? 'DESC' : 'ASC';\n  }\n  switch (action.type) {\n    case SORT_COLUMN:\n      return {\n        ...state,\n        sortColumn: {\n          column: action.value,\n          order: columnOrder,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default sort;\n","import { combineReducers } from 'redux';\nimport planets from './Planets';\nimport filters from './Filters';\nimport sort from './Sort';\n\nconst rootReducer = combineReducers({\n  planets,\n  filters,\n  sort,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}